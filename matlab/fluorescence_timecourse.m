%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: /home/andrew/fluorimeter/011024_5um_gp28_wt_polar_lipid_1.dat
%
% Auto-generated by MATLAB on 24-Jan-2024 13:48:47

%% VARIABLES TO ADJUST

% how many time courses you want to plot. note that they all need to be
% using the same processing
num_spectra=8

% change this to process the data differently. This set fMin to be the
% fluorescence value right after the jump from liposome addition in the
% FD70 assay, otherwise keep it false
isFD70 = false

% for FD70 assay t0 is set as the time after the first derivative falls
% below a threshold of the closest local maximum of df / dt. this truncates
% off fluorimeter readings where change is too rapid (ie, mixing is going
% on)
threshold = 0.003

% whether or not to smooth the time points. makes it easier to see slow
% change
smooth = 0

%%
data = {};
for i=1:num_spectra
    %% Set up the Import Options and import the data
    opts = delimitedTextImportOptions("NumVariables", 3);
    
    % Specify range and delimiter
    opts.DataLines = [2, Inf];
    opts.Delimiter = " ";
    
    % Specify column names and types
    opts.VariableNames = ["t", "f", "Var3"];
    opts.SelectedVariableNames = ["t", "f"];
    opts.VariableTypes = ["double", "double", "char"];
    
    % Specify file level properties
    opts.ImportErrorRule = "omitrow";
    opts.MissingRule = "omitrow";
    opts.ExtraColumnsRule = "ignore";
    opts.EmptyLineRule = "read";
    opts.ConsecutiveDelimitersRule = "join";
    opts.LeadingDelimitersRule = "ignore";
    
    % Specify variable properties
    opts = setvaropts(opts, "Var3", "WhitespaceRule", "preserve");
    opts = setvaropts(opts, "Var3", "EmptyFieldRule", "auto");
    opts = setvaropts(opts, "t", "TrimNonNumeric", true);
    opts = setvaropts(opts, "t", "ThousandsSeparator", ",");
    
    
    % Import the data
    [fname, path] = uigetfile('*.*');
    timecourse = readtable(fname, opts);
    
    %% Clear temporary variables
    clear opts;

    data{i}= struct;
    data{i}.title = fname;
    data{i}.time_raw = timecourse.t;
    data{i}.fluorescence_raw = timecourse.f;
    data{i}.bline = mean(data{i}.fluorescence_raw(1:30));
    data{i}.fnorm = data{i}.fluorescence_raw - data{i}.bline;
    data{i}.fmax = mean(data{i}.fnorm(end-50:end));
    data{i}.fnorm = data{i}.fnorm / data{i}.fmax;
    if smooth > 0
        data{i}.fsmooth = smoothdata(data{i}.fnorm, 'sgolay', smooth);
    else 
        data{i}.fsmooth = data{i}.fnorm;
    end
    data{i}.dfdt = gradient(data{i}.fsmooth(:)) ./ gradient(data{i}.time_raw(:));
    if isFD70 == false
        data{i}.d2fd2t = gradient(data{i}.dfdt(:)) ./ gradient(data{i}.time_raw(:));
        [val, data{i}.t0] = max(data{i}.d2fd2t(1:int16(end/3)));
        data{i}.t_adjusted = data{i}.time_raw(data{i}.t0:end);
        

    % for FD70 assays uncomment this
    else
        [magnitude, inflexion_pt] = max(data{i}.dfdt(1:int16(end/3)));
        s = 1;
        while data{i}.dfdt(inflexion_pt + s) < magnitude*threshold
            s = s + 1;
        end
        data{i}.t0 = inflexion_pt + s;
    end   
    data{i}.f_adjusted = data{i}.fsmooth(data{i}.t0:end);
    data{i}.t_adjusted = data{i}.time_raw(data{i}.t0:end);
    data{i}.t_adjusted = data{i}.t_adjusted - data{i}.t_adjusted(1);
    if isFD70 == true
        % for FD70 subtract out the new baseline fluorescence defined as
        % that at t0
        data{i}.f_adjusted = (data{i}.f_adjusted - data{i}.f_adjusted(1));
        % redefine max fluorescence and scale to renormalize
        data{i}.fmax  = mean(data{i}.f_adjusted(end-50:end))
        data{i}.f_adjusted = (data{i}.f_adjusted / data{i}.fmax)
    end
end
for i=1:num_spectra
    plot(data{i}.t_adjusted, data{i}.f_adjusted);
    hold on;
    %plot(data{i}.time_raw, data{i}.dfdt)
    %plot(data{i}.time_raw, data{i}.fsmooth);
    %plot(data{i}.time_raw, data{i}.fluorescence_raw);
    hold on;
end
legend;
ax = gca;
for i=1:num_spectra
    ax.Legend.String{i} = data{i}.title;
    ax.Children(i).LineWidth = 2;
end

%xlabel('Time');
%ylabel('F_N_o_r_m');
clear {'i', 'timecourse', 'val'}