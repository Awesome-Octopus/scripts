#!/bin/bash
# DEERplot
# Rob McCarrick - Miami University
# Version 1.0
# 03/08/2011

## Creates the gnuplot input file and creates a PDF for the time domain data

for f in *_fit.dat # Initiates the for loop to run over all of the time domain files in the directory
do
export filetime=`echo $f | sed 's/_fit.dat//g'` # Creates a root filename from the dataset
export name=`echo $f | sed 's/_fit.dat/_time/g'` # Creates a filename with _time appended
export nameunder=`echo $f | sed 's/_fit.dat//g' | sed 's/_/\\\_/g'` # Creates a filename with underscores excaped out to accomodate "postscript enhanced" mode in gnuplot
echo 'set terminal postscript enhanced eps color size 11,8.5 lw 6 "Arial" 32' > tmp.gnuplot # Generates a temporary gnuplot file
echo "set output \"$name.eps\"" >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set nokey' >> tmp.gnuplot # Generates a temporary gnuplot file
echo "set title 'Time Domain $nameunder'" >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set xlabel "time ({/Symbol m}s)"' >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set style line 1 linecolor rgb "black"' >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set style line 2 lt 2 linecolor rgb "red"' >> tmp.gnuplot # Generates a temporary gnuplot file
echo "plot \"$f\" using 1:2 with lines ls 1, \"$f\" using 1:3 with lines ls 2" >> tmp.gnuplot # Generates a temporary gnuplot file
gnuplot tmp.gnuplot # Executes the gnuplot file
epstopdf "$name.eps" # Creates a PDF file from the EPS file
rm "$name.eps" # Removes the EPS file
echo -n " $name.pdf" | cat >> tmp.pdf$filetime # Writes the name of the PDF file to a temp file to be used to combine the data later
rm tmp.gnuplot # Removes the gnuplot file
done

## Creates the gnuplot input file and creates a PDF for the frequency domain data

for f in *_spc.dat # Initiates the for loop to run over all of the frequency domain files in the directory
do
export filefreq=`echo $f | sed 's/_spc.dat//g'` # Creates a root filename from the dataset
export name=`echo $f | sed 's/_spc.dat/_freq/g'` # Creates a filename with _freq appended
echo 'set terminal postscript eps color size 11,8.5 lw 6 "Arial" 32' > tmp.gnuplot # Generates a temporary gnuplot file
echo "set output \"$name.eps\"" >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set nokey' >> tmp.gnuplot # Generates a temporary gnuplot file
echo "set title \"Frequency Domain $filefreq\"" >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set xlabel "frequency (MHz)"' >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set style line 1 linecolor rgb "black"' >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set style line 2 lt 2 linecolor rgb "red"' >> tmp.gnuplot # Generates a temporary gnuplot file
echo "plot \"$f\" using 1:2 with lines ls 1, \"$f\" using 1:3 with lines ls 2" >> tmp.gnuplot # Generates a temporary gnuplot file
gnuplot tmp.gnuplot # Executes the gnuplot file
epstopdf "$name.eps" # Creates a PDF file from the EPS file
rm "$name.eps" # Removes the EPS file
echo -n " $name.pdf" | cat >> tmp.pdf$filefreq # Writes the name of the PDF file to a temp file to be used to combine the data later
rm tmp.gnuplot # Removes the gnuplot file
done

## Creates the gnuplot input file and creates a PDF for the distance distribution data

for f in *_distr.dat # Initiates the for loop to run over all of the distance distribution files in the directory
do
export filedist=`echo $f | sed 's/_distr.dat//g'` # Creates a root filename from the dataset
export name=`echo $f | sed 's/_distr.dat/_dist/g'` # Creates a filename with _dist appended
echo 'set terminal postscript eps color size 11,8.5 lw 6 "Arial" 32' > tmp.gnuplot # Generates a temporary gnuplot file
echo "set output \"$name.eps\"" >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set nokey' >> tmp.gnuplot # Generates a temporary gnuplot file
echo "set title \"Distance Distribution $filedist\"" >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set xlabel "r (nm)"' >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set style line 1 linecolor rgb "black"' >> tmp.gnuplot # Generates a temporary gnuplot file
echo "plot \"$f\" using 1:2 with lines ls 1" >> tmp.gnuplot # Generates a temporary gnuplot file
gnuplot tmp.gnuplot # Executes the gnuplot file
epstopdf "$name.eps" # Creates a PDF file from the EPS file
rm "$name.eps" # Removes the EPS file
echo -n " $name.pdf" | cat >> tmp.pdf$filedist # Writes the name of the PDF file to a temp file to be used to combine the data later
rm tmp.gnuplot # Removes the gnuplot file
done

## Creates the gnuplot input file and creates a PDF for the l-curve data

for f in *_Lcurve.dat # Initiates the for loop to run over all of the l-curve files in the directory
do
export filelcurve=`echo $f | sed 's/_Lcurve.dat//g'` # Creates a root filename from the dataset
export lvalue=`gawk '{if (/Regularization/) print $3}' "$filedist"_res.txt` # Grabs the regularization parameter from the results file
if [ $lvalue == "0.001" ] # Initiates the if statement to write the line of the l-curve file that corresponds to the regularization parameter
then
sed -n '1p' $f | cat > tmp.lcurve
elif [ $lvalue == "0.01" ]
then
sed -n '2p' $f | cat > tmp.lcurve
elif [ $lvalue == "0.1" ];
then
sed -n '3p' $f | cat > tmp.lcurve
elif [ $lvalue == "1" ];
then
sed -n '4p' $f | cat > tmp.lcurve
elif [ $lvalue == "10" ];
then
sed -n '5p' $f | cat > tmp.lcurve
elif [ $lvalue == "100" ];
then
sed -n '6p' $f | cat > tmp.lcurve
elif [ $lvalue == "1000" ];
then
sed -n '7p' $f | cat > tmp.lcurve
elif [ $lvalue == "10000" ]
then
sed -n '8p' $f | cat > tmp.lcurve
else [ $lvalue == "100000" ]
sed -n '9p' $f | cat > tmp.lcurve
fi
export name=`echo $f | sed 's/_Lcurve.dat/_lcurve/g'` # Creates a filename with _lcurve appended
export nameunder=`echo $f | sed 's/_Lcurve.dat//g' | sed 's/_/\\\_/g'` # Creates a filename with underscores excaped out to accomodate "postscript enhanced" mode in gnuplot
echo 'set terminal postscript enhanced eps color size 11,8.5 lw 6 "Arial" 32' > tmp.gnuplot # Generates a temporary gnuplot file
echo "set output \"$name.eps\"" >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set nokey' >> tmp.gnuplot # Generates a temporary gnuplot file
echo "set title 'L-Curve $nameunder'" >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set xlabel "log {/Symbol r}"' >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set ylabel "log {/Symbol h}"' >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set style line 1 pointtype 7 pointsize 4 linecolor rgb "black"' >> tmp.gnuplot # Generates a temporary gnuplot file
echo 'set style line 2 pointtype 7 pointsize 4 linecolor rgb "red"' >> tmp.gnuplot # Generates a temporary gnuplot file
echo "plot \"$f\" using 1:2 with points ls 1, \"tmp.lcurve\" using 1:2 with points ls 2" >> tmp.gnuplot # Generates a temporary gnuplot file
gnuplot tmp.gnuplot # Executes the gnuplot file
epstopdf "$name.eps" # Creates a PDF file from the EPS file
rm "$name.eps" # Removes the EPS file
rm tmp.lcurve # Removes the temporary lcurve file
echo -n " $name.pdf" | cat >> tmp.pdf$filelcurve # Writes the name of the PDF file to a temp file to be used to combine the data later
rm tmp.gnuplot # Removes the gnuplot file
done

## Cycles through the temporary PDF files and creates one PDF file for each data set

for f in tmp.pdf* # Initiates a for loop to cycle through the temporary PDF files
do
export filename=`echo $f | sed 's/tmp.pdf//g'` # Creates a root filename
export list=`cat $f` # Creates a variable that is a list of the PDF files for a given dataset
pdftk $list cat output "$filename.pdf" # Uses pdftk to merge the time, frequency, distance and l-curve PDF files for a given dataset
rm $list # Removes the temporary PDF files
done
rm tmp.pdf* # Removes the list temporary files
