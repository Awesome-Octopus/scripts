Vector Diagram Simulation Package
Ohio Advanced EPR Laboratory
Robert McCarrick
Pulse EPR Vector Simulation Package, Version 2.01
Last Modified 10/31/2017

Version History:
2.01 Changed pulse.m to pulsespin.m to avoid function conflict with EasySpin and tweaked a bug in the AVI video creation
2.0 Added the ability to create animated GIF and AVI files directly in Matlab and simplified some of the parameters
    Added the ability to set a figure size
    Cleaned up the appearance of the figure (remove whitespace)
1.3 Changed from a length/increment scheme to a length/number of frames scheme for the simulations
1.2 Cleaned up the vector plot and reversed the axes
1.11 Removed dependence on EasySpin for the rotation matrices
1.1 Added the ability to save each slice as a PNG file.
1.0 First version

Software Requirements:
Matlab 7.0 or greater (earlier versions might work, but it hasn't been tested)

Installation:
To install this package, unzip the file to a known location and add the location of that folder to the paths of Matlab.  To do so, go to "File" and 'Set Path...'

Usage:  This package includes two functions, evolution.m and and pulsespin.m.  The former accept two structures, one with a set of spins with an initial position in spherical coordinates, T1, T2 and a frequency offset from the rotating frame and two, a set of parameters dictating the simulation.  These inputs allow the set of spins to evolve according to the Bloch equations with the output being a matrix of the final position of the spins.  The latter function also accepts two structures, one with a matrix of spin positions and one with a pulse tip angle and B1 axis.  Chaining these two functions together can simulate any microwave pulse sequence.  In addition, the package allows the user to save an animated GIF or AVI file of the simulation.

evolution.m:

Please make sure to use the command "clear all" at the beginning of scripts to make sure that old variables are not being included.

This function accepts two structures, a spin structure and a structure with the simulation parameters (feel free to use any name for the two structures).

Spin Structure:

	Parameters:
		X.degrees – an mx3 matrix with spherical coordinates [φ,θ,r] (required, no default value).
			ex. [0,0,1;0,0,1;0,0,1] % This matrix has three spins of length 1 oriented along the z axis
			      [0,90,0.5] % This matrix has one spin of length 0.5 aligned along the x axis
		X.offset – an mx1 array with the frequency offset for each corresponding spin from the X.degrees matrix in Hz (required, no default value).
			ex.  [-1000000,0,1000000] % This matrix has three offsets of -1, 0 and 1 MHz.
		X.Tone – a scalar value corresponding to T1 in seconds. (default value 100 seconds)
		X.Ttwo – a scalar value corresponding to T2 in seconds. (default value 100 seconds)

Simulation Structure:
	Parameters:
		Y.length – a scalar value corresponding to the total length of the simulation in seconds (required, no default value).
		Y.nframes - a scalar value corresponding to the number of frames in the simulation (if left out, defaults to 100).
		Y.framerate – a scalar value corresponding to the number of frames per second.  Depending on the speed of the computer, this may not exactly correspond to the actual framerate when conducting a simulation with no file output.  For Animted GIF and AVI files, this corresponds to the framerate for the video.
		Y.figuresize - sets the dimensions of the figure, [width height] (if left out, defaults to [900 500])
		Y.video – a string (either 'n', 'gif' or 'avi') indicating whether or not a video file will be saved (if left out, defaults to 'n').
		Y.filename - a string containing the name of the desired output file including the file extension.
		Y.numloops - sets the number of loops for the Animated GIF (if left out, defaults to 'inf')

Calling the function:
	To call the function if not saving an animation file, use the following syntax:
		X.degrees = evolution(X,Y)
	X is the name of the spin structure, Y is the name of the simulation structure and output will be a matrix with the spherical coordinates of the final position and length of the spins based on the Bloch equations.

	To call the function if saving an animation file, use the following syntax:
		[X.degrees Y] = evolution(X,Y)

pulsespin.m:

Please make sure to use the command "clear all" at the beginning of scripts to make sure that old variables are not being included.

This function accepts two structures, a spin structure and pulse structure (feel free to use any name for the two structures).

Spin structure:
	Parameters:
		X.degrees – an mx3 matrix with spherical coordinates [φ,θ,r] (required, no default value).
			ex. [0,0,1;0,0,1;0,0,1] % This matrix has three spins of length 1 oriented along the z axis
			      [0,90,0.5] % This matrix has one spin of length 0.5 aligned along the x axis

Pulse structure:
	Parameters:
		Y.direction – This parameter represents the direction of B1 for the pulse.  The permitted values are 'x', 'y', '-x' and '-y' (if left out, defaults to '-y').
		Y.angle – This parameter is a scalar value that represents the tip angle of the pulse in degrees (required, no default value).
		Y.nframes - a scalar value corresponding to the number of frames in the simulation (if left out, defaults to angle/2).
		Y.framerate – a scalar value corresponding to the number of frames per second.  Depending on the speed of the computer, this may not exactly correspond to the actual framerate when conducting a simulation with no file output.  For Animted GIF and AVI files, this corresponds to the framerate for the video.
		Y.figuresize - sets the dimensions of the figure, [width height] (if left out, defaults to [900 500])
		Y.video – a string (either 'n', 'gif' or 'avi') indicating whether or not a video file will be saved (if left out, defaults to 'n').
		Y.filename - a string containing the name of the desired output file including the file extension.
		Y.numloops - sets the number of loops for the Animated GIF (if left out, defaults to 'inf')

Calling the function:
	To call the function if not saving an animation file, use the following syntax:
		X.degrees = pulse(X,Y)
	X is the name of the spin structure, Y is the name of the pulse structure and output will be a matrix with the spherical coordinates of the final position and length of the spins after the application of the pulse.

	To call the function if saving an animation file, use the following syntax:
		[X.degrees Y] = pulse(X,Y)
